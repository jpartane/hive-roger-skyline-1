# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    description.txt                                    :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: jpartane <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2020/02/06 15:47:54 by jpartane          #+#    #+#              #
#    Updated: 2020/09/24 13:39:40 by jpartane         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

VM Part:

---> Virtual Machine Installation
:: Install Virtual Box VM
:: Create a new Debian Virtual Machine
:: Choose a hostname
:: Setup the root password
:: Create a non root user and a password
:: Create a primary partition mounted on / with atleast 4.2 GB of space and
   another one as logical mounted on /home
:: You can install the desktop environment or not, I choose not to
:: Install GRUB on the master boot record

---> Keeping the Virtual Machine up to date
:: <<< sudo apt-get update -y && apt-get upgrade -y >>>
::   <<< sudo apt-get install portsentry fail2ban apache2 mailutils git -y >>>


NETWORK AND SECURITY PART

Step 1: Setting up sudo rights for user

		First you need to install the sudo package as root running the command
		<<< apt-get install sudo >>>
		Edit this file: cat /etc/sudoers with the <<< visudo >>> command
		Output:

		# This file MUST be edited with the 'visudo' command as root.
		#
		# Please consider adding local content in /etc/sudoers.d/ instead of
		# directly modifying this file.
		#
		# See the man page for details on how to write a sudoers file
		#
		#
		Defaults		env_reset
		Defaults		mail_badpass
		Defaults		secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbi$

		# Host alias specification

		# User alias specification

		# Cmd alias specification

		# User privilege specification
		root		ALL=(ALL:ALL) ALL
		juska		ALL=(ALL:ALL) NOPASSWD:ALL

		# Allow memvbers of group sudo to execute any command
		%sudo		ALL=(ALL:ALL) ALL

		# See sudoers(5) for more information on "#include" directives:

		#includedir /etc/sudoers.d

Step 2: (Setup a static IP)

		First you need to change the network settings of our Virtual Box Machine
		The default Network Adapter is 'NAT' and you need to change it to 'Bridge Adapter'
		=================================================================================
		Now you need to edit the file /etc/network/interfaces
		The Output should look like this:
		source /etc/network/interfaces.d/*

		#The loopback Network interface
		auto lo
		iface lo inet loopback

		#The primary network interface
		auto enp0s3
		=================================================================================
		Now you need to configure this network with a static IP, you need to create a
		file name 'enp0s3' in the following directory: 'etc/network/interfaces.d/'
		The output should look like this (Ive putted up my own IP which I set):
		iface enp0s3 inet static
			  address 10.12.181.239
			  netmask 255.255.255.252
			  gateway 10.12.254.254

		Info about Subnet Masks : Subnet Mask: http://www.sput.nl/internet/netmask-table.html
		You can get the gateway IP with this command <<< ip r | grep default >>>
		=================================================================================
		To test if your change was succesful, you need to restart the network with command:
		<<< sudo service networking restart >>>
		And then run this comman to see if the changes actually applied
		<<< ip ap >>>
		=================================================================================

Step 3: (Changing default port of SSH to one of your choice)

		First you need to run the command
		<<< sudo vim /etc/ssh/sshd_config >>>
		Then locate line 13 which has by default commented out
		'# Port 22'
		Remove the # and put a port of your choice
		And then restart the sshd service by running the command:
		<<< service sshd restart >>>
		*****************************IMPORTANT*******************************
		Port numbers are assigned in various ways, based on three ranges:
		System Ports (0-1023), User Ports (1024-49151), and the Dynamic and/or
		Private ports (49152-65535) <- you need to choose your port from this range
		The difference uses of these ranges is desribed in [RFC6335].
		According to Section 8.1.2 of [RFC6335], System Ports are assigned
		by the 'IETF Review' or 'IESG Approval' procedures described in [RFC8126].
		User Ports are assigned by IANA using the 'IETF Review' process, the
		'IESG Approval' process, or the 'Expert Review' process, as per [RFC6335].
		Dynamic Ports are not assigned.
		Source: https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
		=================================================================================
		Now it is possible to login with ssh with the new assigned port:
		<<< ssh juska@10.12.181.239 -p 54321
		=================================================================================

Step 4: (SSH acces with public key authentication)
		
		First you need to create public and private rsa key pair on our host machine.
		They must be generated in ~/.ssh folder with command:
		<<< ssh-keygen -t rsa >>>
		Output will look like this (example):
		=================================================================================
		Generating public + private rsa key pair.
		Enter file in which to save the key (/Users/jpartane/.ssh/id_rsa):
		 <<< At this point you will just press enter multiple times, or if you choose >>>
		 <<< to set up passphrases to add extra security, the choice is yours. >>>
		 At the end you will see something like this:
		 Your identification has been saved in /Users/jpartane/.ssh/id_rsa.
		 Your public key has been saved in /Users/jpartane/.ssh/id_rsa.pub.
		 And also "the key fingerprint is:" and "The keys randomart image is:"
		 ================================================================================
		 To check if it worked, run the commands <<< cd .ssh>>> <<< ls >>> Output should look like
		 "id_rsa		id_rsa.pub		known_hosts"
		 id_rsa = your private key. The private key is stored on your local computer and should be
		 kept secure, with permissions set so that no other users can read the file.
		 id_rsa.pub = a public key, and it is placed on the server you intend to log in to. You can freely
		 share your public key with others. If someone else adds your public key to their server,
		 you will be able to log in to that server.
		 Source: https://www.linode.com/docs/security/authentication/use-public-key-authentication-with-ssh/#connect-to-the-remote-server
		 Now run the command :
		 <<< ssh-copy-id -i id_rsa.pub juska@10.12.181.239 -p 54321 >>>
		 ================================================================================
		 Now you need to remove the root login permit and the password authentification
		 You need to edit your sshd_config file in /etc/ssh/sshd_config
		 Edit line 32: PermitRootLogin no
		 Edit line 37: PubkeyAuthentication yes
		 Edit line 56: PasswordAuthentication no
		 /***** DONT FORGET TO REMOVE THE COMMENT SIGNS '#' BEFORE THE COMMANDS *****\
		 ================================================================================
		 Now restart the SSHD daemon service
		 <<< sudo service sshd restart >>>
		 Now you are able to connect to the server via ssh with the public key without
		 typing the password and login. Also login into the root will not be possible
		 ================================================================================

Step 5: Setting up the Firewall with UFW

		First you need to install the ufw package <<< sudo apt-get install ufw
		Then you need to check if ufw is enabled with the command:
		<<< sudo ufw status >>>
		If its inactive u need to enable it (after youve set the rules!!!!!!!)
		<<< sudo ufw enable >>>
		=================================================================================
		Now you need to setup the rules for your firewall with commands:
		<<< sudo ufw allow 54321/tcp >>> This allows incoming SSH connections
		<<< sudo ufw allow 80/tcp >>> This allows incoming HTTP (port 80) connections
		<<< sudo ufw allow 443 >>> This allows incoming HTTPS (port 443) connections
		Info about firewall
		https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands
		=================================================================================
		Now you need to set up the Denial Of Service Attack with fail2ban
		<<< sudo apt-get install fail2ban>>>
		Now you need to edit the jail.conf in the fail2ban folder, but we need to make adding 
		copy of the fail, otherwise the conf file will reset itself to default.
		<<< sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local >>>
		=================================================================================
		Now you need to edit the jail.local file. In there locate a part called "JAILS"
		First thing there is #SSH servers. Underneath that should look like this
		[sshd]
		enabled = true
		port	= ssh
		logpath = %(sshd_log)s
		backend = %(sshd_backend)s
		maxretry = 3
		bantime = 600

		AND u go more down u see a part called #HTTP servers. Under that should look like
		[http-get-dos]
		enabled = true
		port = http,https
		filter = http-get-dos
		logpath = /var/log/apache2/access.log
		maxretry = 300
		findtime = 300
		bantime = 600
		action = iptables[name=HTTP, port=http, protocol=tcp]
		=================================================================================
		Now you need to go in <<< cd /etc/fail2ban/filter.d >>>
		And in here u need to create file called http-get-dos.conf
		And inside that empty file u write
		[Definition]
		failregex = ^<HOST> -.*"(GET|POST).*
		ignoreregex =
		=================================================================================
		Now you need to reload your firewall and fail2ban with commands:
		<<< sudo ufw reload>>>
		<<< sudo service fail2ban restart >>>
		=================================================================================
		You can now test if the new conf works with Slowloris (an HTTP DDOS attack script)
		install git first : <<< sudo apt-get install git >>>
		install Slowloris: <<< git clone https://github.com/gkbrk/slowloris.git >>>
		Run the command: perl slowloris.py 10.12.181.239 (your ip)
		In order to see if your new fail2ban conf actually works, you need to
		check the following file:
		/var/log/fail2ban.log
		You can unban the ip that got banned with
		https://bobcares.com/blog/fail2ban-unban-ip/
		=================================================================================

Step 6: Setting up protection against port scans

		First you need to install the nmap tool <<< sudo apt-get install map >>>
		Nmap is a free and open source network discovery and security utility.
		It works by sending data packets on a specific target and by interpreting
		the incoming packets to determine what ports are open or closed.
		More general info about nmap 
		https://www.varonis.com/blog/nmap-commands/
		Also you need to install portsentry <<< sudo apt-get install portsentry >>> 
		To run nmap type <<< nmap 10.12.181.239 >>> (so nmap and your ip address)
		I got output like this:
		Starting Nmap 7.70 ( https://nmap.org ) at 2020-02-19 06:20 EST
		Nmap scan report for 10.12.181.239
		Host is up (0.000041s latency).
		Not shown: 984 closed ports
		PORT      STATE SERVICE
		1/tcp     open  tcpmux
		79/tcp    open  finger
		80/tcp    open  http
		111/tcp   open  rpcbind
		119/tcp   open  nntp
		143/tcp   open  imap
		1080/tcp  open  socks
		1524/tcp  open  ingreslock
		2000/tcp  open  cisco-sccp
		6667/tcp  open  irc
		12345/tcp open  netbus
		31337/tcp open  Elite
		32771/tcp open  sometimes-rpc5
		32772/tcp open  sometimes-rpc7
		32773/tcp open  sometimes-rpc9
		32774/tcp open  sometimes-rpc11
		=================================================================================
		Now you need to edit the /etc/default/portsentry file. Output should be like this:
		TCP_MODE="atcp"		(portscan detection advanced mode)
		UDP_MODE="audp"		(advanced portscan detection of specified ports)
		Now you need to edit portsentry.conf file in /etc/portsentry
		Change the following entries
		BLOCK_UDP="1"
		BLOCK_TCP="1"	(Block UDP/TCP scans with 1)

		Now comment the current KILL_ROUTE command and uncomment the following one:
		KILL_ROUTE="/sbin/iptables -I INPUT -s $TARGET$ -j DROP"
		This will drop all packets originating from an attackers IP address and
		log for future connection attempts.
		NOTE that only one KILL_ROUTE option can be used at a time so do not comment out
		multiple of them.

		Comment this command out:
		KILL_HOSTS_DENY="ALL: $TARGET$ : DENY"
		So the SSH access is not denied.
		Now restart the postsentry service
		<<< sudo service portsentry restart >>>
		=================================================================================

Step 7: Stop services you dont need for this project
https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units

		First you need to check which services are running with either of these commands:
		<<< sudo service --status-all >>> or
		<<< sudo systemctl list-unit-files --type=service | grep enabled >>>
		And these are the services you dont need for this project:
		<<< sudo systemctl disable console-setup.service >>>
		<<< sudo systemctl disable keyboard-setup.service >>>
		<<< sudo systemctl disable apt-daily.timer >>>
		<<< sudo systemctl disable apt-daily-upgrade.timer >>>
		<<< sudo systemctl disable syslog.service >>>
		=================================================================================
		
Step 8: Scheduled updating of packages and monitoring changes

		First step is to create the log file in /var/log, give it permissions and
		create in the root (~/) the actual updating shell script.
		<<< sudo touch /var/log/update_script.log >>>
		<<< sudo chmod 777 /var/log/update_script.log >>>

		<<< sudo vim update_package.sh >>>
		Add these lines in the update_package.sh file
		sudo apt-get update -y >> /var/log/update_script.log
		sudo apt-get upgrade -y >> /var/log/update_script.log
		Now change permissions
		<<< sudo chmod 755 update_package.sh >>>
		And now add update_package.sh task to cron
		<<< sudo crontab -e >>> Adding inside the following lines
		0 4 * * 2 sudo bash /home/juska/update_package.sh
		@reboot sudo bash /home/juska/update_package.sh
		And now enable cron
		<<< sudo systemctl enable cron >>> 
		=================================================================================

Step 9: Schedule updating of packages and monitoring changes

		Then create the monitoring script in root
		<<< sudo vim ~/monitor.sh >>>
		And add the following lines:
		FILE="/var/tmp/check"
		CRON="/etc/crontab"
		SUM=$(sudo md5sum $(CRON)
		if [ ! -f $FILE ]
		then
				echo "$SUM" > $FILE
				exit 0;
		fi
		if [ "$SUM" != "$(cat $FILE)" ]
		then
				sudo sendmail root < /home/juska/mail.text
				echo "$SUM" > $FILE
		fi
		=================================================================================
		Install the mailing package
		<<< sudo apt-get install sendmail >>>
		Now again modify the crontab -e file to add the monitor.sh part there
		<<< sudo crontab -e >>>
		Add the following line
		* * * * * sudo bash /home/juska/monitor.sh
		Now it should send mail to root when /etc/crontab file has been modified
		To check mails
		<<< cd /var/mail ls >>>
		=================================================================================
		#																				#
		#								WEB PART										#
		#																				#
		=================================================================================		
		
Step 1: (Deployment of a web application with your VM IP)
		Create a index.html file into your /var/www/html folder which was created
		with the installation of apache2.
		
Step 2: (Self-signed SSL) (=Secure Sockets Layer)
		
		1) sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private
		/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
		
		2) Fill out the prompts appropriately. The most important line is the one that requests 
		the Common Name (e.g. server FQDN or YOUR name). 
		You need to enter the domain name associated with your server or, more likely, your 
		server’s public IP address:

		Country Name (2 letter code) [AU]:FI
		State or Province Name (full name) [Some-State]: Helsinki
		Locality Name (eg, city) []: Helsinki
		Organization Name (eg, company) [Internet Widgits Pty Ltd]: Hive
		Organizational Unit Name (eg, section) []: Hive
		Common Name (e.g. server FQDN or YOUR name) []: 10.12.181.239
		Email Address []:jpartane@hive.student.fi

		3) sudo nano /etc/apache2/conf-available/ssl-params.conf

		SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
		SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
		SSLHonorCipherOrder On
		# Disable preloading HSTS for now.  You can use the commented out header 
		# line that includes
		# the "preload" directive if you understand the implications.
		# Header always set Strict-Transport-Security "max-age=63072000; 
		# includeSubDomains; preload"
		Header always set X-Frame-Options DENY
		Header always set X-Content-Type-Options nosniff
		# Requires Apache >= 2.4
		SSLCompression off
		SSLUseStapling on
		SSLStaplingCache "shmcb:logs/stapling-cache(150000)"
		# Requires Apache >= 2.4.11
		SSLSessionTickets Off

		4) sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2
		/sites-available/default-ssl.conf.bak

		5) sudo nano /etc/apache2/sites-available/default-ssl.conf
				<IfModule mod_ssl.c>
					<VirtualHost _default_:443>
									ServerAdmin jpartane@student.hive.fi
									ServerName 10.12.166.177

									DocumentRoot /var/www/html

									ErrorLog ${APACHE_LOG_DIR}/error.log
									CustomLog ${APACHE_LOG_DIR}/access.log combined

									SSLEngine on

									SSLCertificateFile	/etc/ssl/certs/apache-selfsigned.crt
									SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key

									<FilesMatch "\.(cgi|shtml|phtml|php)$">
																	SSLOptions +StdEnvVars
									</FilesMatch>
									<Directory /usr/lib/cgi-bin>
																	SSLOptions +StdEnvVars
									</Directory>

							</VirtualHost>
					</IfModule>

			6) sudo nano /etc/apache2/sites-available/000-default.conf

					<VirtualHost *:80>
							. . .

							Redirect "/" "https://10.12.181.239/"

							. . .
					<VirtualHost>

			7) 	sudo a2enmodssl
				sudo a2enmod headers
				sudo a2ensite default-ssl
				sudo a2enconf ssl-params
				##IF YOU WANT TO TEST OUT IF ALL WENT FINE:
				sudo apache2ctl configtest
				Output should look like:
				AH00558: apache2: Could not reliably determine the server's fully 
				qualified domain name, using 127.0.1.1. Set the 'ServerName' directive 
				globally to suppress this message
				Syntax OK

			I did this whole thing following this awesome tutorial step by step
https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-16-04

========================================EVAL==============================================

VM PART
1) Disk size <<< sudo fdisk -l >>>
2) Partition <<< sudo df -h --total >>>
3) check that packages are uptodate <<< sudo apt list --upgradable >>>
4) check which packages are installed <<< sudo apt list --installed | grep package

NETWORK AND SECURITY PART
1) Create a user with SSH key to be able to connect to the VM. Must be part of sudo group
<<< sudo vim /etc/sudoers >>>
Do the same as user juska, under it
Now look the instructions step number 4 to create the ssh key

2) Check that DHCP is deactivated
<<< sudo cat /etc/network/interfaces >>>
Output should look like in Step 2

3) Choose a different netmask than /30 and configure a network connection with this netmask
on the host and the guest side. You will choose the IP's
<<< sudo cat /etc/network/interfaces.d/* >>>
Netmask with 30 is 255.255.255.252, for example u could set it to 255.255.255.254 so now its 31.

4) From the VM check that the port of the SSH has been modified successfully
Root should not be able to connect in SSH.
<<< sudo cat /etc/ssh/sshd_config | grep "Port\|Root\|Pubkey" >>>

5) From the VM run the command that lists firewall rules.
<<< sudo ufw status >>>

6) Test a DOS attack with Slowloris
Go to the slowloris direcrtory in root
Run the command <<< perl slowloris.py 10.12.181.239 >>>

7) From VM run the command that lists open ports
<<< nmap localhost >>>

8) Check if the active services are only the ones that are needed
<<< sudo systemctl list-unit-files --type=service | grep enabled

9) Check cron jobs, that there are atleast 3 jobs
<<< sudo crontab -l

10) Check script to monitor changes made to /etc/crontab
<<<	sudo cat /var/log/update_script.log >>>

11) Check that there is a script to monitor the changes made in the file /etc/crontab and sends an email to root if it has been modified.
<<< sudo crontab -e >>>
write something in there
reboot the system and you should have a notification that you have received mail

